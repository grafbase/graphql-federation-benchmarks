{
  "engineConfig": {
    "defaultFlushInterval": "500",
    "datasourceConfigurations": [
      {
        "kind": "GRAPHQL",
        "rootNodes": [{ "typeName": "Query", "fieldNames": ["nodes"] }],
        "childNodes": [
          {
            "typeName": "Node",
            "fieldNames": [
              "id",
              "floats",
              "ints",
              "strings",
              "int",
              "float",
              "string",
              "nodes"
            ]
          }
        ],
        "overrideFieldPathFromAlias": true,
        "customGraphql": {
          "fetch": {
            "url": { "staticVariableContent": "http://localhost:7100/graphql" },
            "method": "POST",
            "body": {},
            "baseUrl": {},
            "path": {}
          },
          "subscription": {
            "enabled": true,
            "url": { "staticVariableContent": "http://localhost:7100/graphql" },
            "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS",
            "websocketSubprotocol": "GRAPHQL_WEBSOCKET_SUBPROTOCOL_AUTO"
          },
          "federation": {
            "enabled": true,
            "serviceSdl": "type Query {\n  nodes(n: Int!): [Node!]!\n}\n\ntype Node {\n  id: Int!\n  floats: [Float!]!\n  ints: [Int!]!\n  strings: [String!]!\n  int: Int!\n  float: Float!\n  string: String!\n  nodes(n: Int!): [Node!]!\n}\n"
          },
          "upstreamSchema": {
            "key": "a18d487ccedf30da476b857550c1565868e56533"
          }
        },
        "requestTimeoutSeconds": "10",
        "id": "0"
      }
    ],
    "fieldConfigurations": [
      {
        "typeName": "Query",
        "fieldName": "nodes",
        "argumentsConfiguration": [
          { "name": "n", "sourceType": "FIELD_ARGUMENT" }
        ]
      },
      {
        "typeName": "Node",
        "fieldName": "nodes",
        "argumentsConfiguration": [
          { "name": "n", "sourceType": "FIELD_ARGUMENT" }
        ]
      }
    ],
    "graphqlSchema": "schema {\n  query: Query\n}\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Query {\n  nodes(n: Int!): [Node!]!\n}\n\ntype Node {\n  id: Int!\n  floats: [Float!]!\n  ints: [Int!]!\n  strings: [String!]!\n  int: Int!\n  float: Float!\n  string: String!\n  nodes(n: Int!): [Node!]!\n}",
    "stringStorage": {
      "a18d487ccedf30da476b857550c1565868e56533": "schema {\n  query: Query\n}\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Node {\n  float: Float!\n  floats: [Float!]!\n  id: Int!\n  int: Int!\n  ints: [Int!]!\n  nodes(n: Int!): [Node!]!\n  string: String!\n  strings: [String!]!\n}\n\ntype Query {\n  nodes(n: Int!): [Node!]!\n}\n\nscalar openfed__FieldSet"
    }
  },
  "version": "8148c110-0abe-4fca-82f5-bc5b28d4b4ff",
  "subgraphs": [
    {
      "id": "0",
      "name": "subgraph",
      "routingUrl": "http://localhost:7100/graphql"
    }
  ],
  "compatibilityVersion": "1:0.43.3"
}
